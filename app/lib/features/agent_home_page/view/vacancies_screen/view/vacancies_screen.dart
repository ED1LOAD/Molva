import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:app/constants.dart';
import 'package:app/features/agent_home_page/view/vacancies_screen/widgets/view.dart';
import 'package:crypto/crypto.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';
import 'package:app/theme.dart';
import 'package:app/features/agent_home_page/view/vacancies_screen/widgets/view.dart';

String ozon =
    "";
String yandex =
    "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";

class VacanciesScreen extends StatefulWidget {
  const VacanciesScreen({super.key});

  @override
  State<VacanciesScreen> createState() => _VacanciesScreenState();
}

class _VacanciesScreenState extends State<VacanciesScreen> {
  final storage = const FlutterSecureStorage();
  final List<Vacancy> vacancies = [
    Vacancy(
      id: 1,
      title: "Golang разработчик",
      company: "Ozon",
      date: "15 мая",
      description: "Опыт с Go",
      picture: ozon,
      hasResponses: true,
      cost: 100000,
    ),
    Vacancy(
      id: 2,
      title: "Курьер",
      company: "Ozon",
      date: "5 апреля",
      description: "Без опыта",
      picture: ozon,
      hasResponses: false,
      cost: 30000,
    ),
    Vacancy(
      id: 3,
      title: "Аналитик данных",
      company: "Yandex",
      date: "24 апреля",
      description: "Опыт в аналитике",
      picture: yandex,
      hasResponses: false,
      cost: 80000,
    ),
    Vacancy(
      id: 3,
      title: "Java разработчик",
      company: "Yandex",
      date: "7 июня",
      description: "Опыт в Java",
      picture: yandex,
      hasResponses: false,
      cost: 8000,
    ),
  ];

  int page = 1;
  bool isLoading = false;
  final ScrollController _scrollControllerVacancies = ScrollController();
  final ScrollController _scrollControllerResponse = ScrollController();
  final String access_token = "aaa";
  final String agent_id = "aaa";

  bool _isVacancies = true;
  bool _isResponds = false;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _scrollControllerVacancies.dispose();
    super.dispose();
  }

  void _scrollListener() {
    if (_scrollControllerVacancies.position.pixels ==
        _scrollControllerVacancies.position.maxScrollExtent) {
      _fetchVacancies();
    }
  }

  List<Vacancy> _getVacancies(String body) {
    final decodedBody = jsonDecode(body) as List<dynamic>;
    final result = decodedBody
        .map((vacancyJson) => Vacancy.fromJson(vacancyJson))
        .toList();
    return result;
  }

  Future<void> _fetchVacancies() async {
    if (isLoading) return;

    setState(() {
      isLoading = true;
    });
    try {
      final response = await http.get(Uri.parse(
          '$domain/vacancies?agent_id=$agent_id&access_token=$access_token&amount=10'));
      if (response.statusCode == 200) {
        final newVacancies = _getVacancies(response.body);
        setState(() {
          vacancies.addAll(newVacancies);
          page++;
          isLoading = false;
        });
      } else {
        throw Exception('Failed to fetch vacancies');
      }
    } catch (error) {
      setState(() {
        isLoading = false;
      });
    }
  }

  void _onPressedVacancies() {
    setState(() {
      _isVacancies = true;
      _isResponds = false;
    });
  }

  void _onPressedResponds() {
    setState(() {
      _isVacancies = false;
      _isResponds = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    final isMobileLayout = !kIsWeb || MediaQuery.of(context).size.width < 800;

    return isMobileLayout ? _buildMobileLayout() : _buildWebLayout();
  }

  Widget _buildMobileLayout() {
    return Scaffold(
      backgroundColor: background,
      appBar: AppBar(
        backgroundColor: background,
        clipBehavior: Clip.none,
        title: Text(
          'Список вакансий',
          style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                fontSize: 16.0,
              ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.sort),
          color: darkgray,
          onPressed: () {},
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.search),
            color: darkgray,
            onPressed: () {},
          ),
        ],
      ),
      body: Column(
        children: [
          TopButtons(
            isVacancies: _isVacancies,
            onPressedVacancies: _onPressedVacancies,
            isResponds: _isResponds,
            onPressedResponds: _onPressedResponds,
          ),
          _isVacancies
              ? Flexible(child: _vacancyListBuilder())
              : Flexible(child: _respondsListBuilder()),
        ],
      ),
    );
  }

  Widget _buildWebLayout() {
    return Scaffold(
      backgroundColor: background,
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(56.0),
        child: Center(
          child: Container(
            constraints: const BoxConstraints(maxWidth: 1024),
            child: AppBar(
              backgroundColor: background,
              clipBehavior: Clip.none,
              title: Text(
                'Список вакансий',
                style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                      fontSize: 16.0,
                    ),
              ),
              centerTitle: true,
              leading: IconButton(
                icon: const Icon(Icons.sort),
                color: darkgray,
                onPressed: () {},
              ),
              actions: [
                IconButton(
                  icon: const Icon(Icons.search),
                  color: darkgray,
                  onPressed: () {},
                ),
              ],
            ),
          ),
        ),
      ),
      body: Center(
        child: Container(
          constraints: const BoxConstraints(maxWidth: 1024),
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Column(
            children: [
              TopButtons(
                isVacancies: _isVacancies,
                onPressedVacancies: _onPressedVacancies,
                isResponds: _isResponds,
                onPressedResponds: _onPressedResponds,
              ),
              _isVacancies
                  ? Flexible(child: _vacancyListBuilder())
                  : Flexible(child: _respondsListBuilder()),
            ],
          ),
        ),
      ),
    );
  }

  ListView _vacancyListBuilder() {
    return ListView.builder(
      padding: EdgeInsets.zero,
      shrinkWrap: true,
      controller: _scrollControllerVacancies,
      itemCount: vacancies.length + 1,
      itemBuilder: (context, index) {
        if (index == vacancies.length) {
          return isLoading ? const CircularProgressIndicator() : Container();
        }
        final vacancy = vacancies[index];
        var imageBytes = base64Decode(vacancy.picture);
        return VacancyWidget(vacancy: vacancy, imageBytes: imageBytes);
      },
    );
  }

  ListView _respondsListBuilder() {
    List<Vacancy> vacanciesWithResposes = [];
    for (var i = 0; i < vacancies.length; i++) {
      if (vacancies[i].hasResponses) {
        vacanciesWithResposes.add(vacancies[i]);
      }
    }
    return ListView.builder(
      padding: EdgeInsets.zero,
      shrinkWrap: true,
      controller: _scrollControllerResponse,
      itemCount: vacanciesWithResposes.length + 1,
      itemBuilder: (context, index) {
        if (index == vacanciesWithResposes.length) {
          return isLoading ? const CircularProgressIndicator() : Container();
        }
        final vacancy = vacanciesWithResposes[index];
        var imageBytes = base64Decode(vacancy.picture);
        return VacancyWidget(vacancy: vacancy, imageBytes: imageBytes);
      },
    );
  }
}
